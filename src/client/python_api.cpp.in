/**
 * This file generates the python bindings for the client API
 */

#include "python_converter.h"

#include "credb/credb.h"

using namespace credb;

PYBIND11_MODULE(credb, m)
{
 //   py::docstring_options doc_options;
   // doc_options.disable_signatures();
    
    m.def("create_client", credb::create_client, 
            py::arg("client_name"), py::arg("server_name"), py::arg("host"), py::arg("port")=0, py::arg("unsafe_mode")=false, "@DocString(create_client)");

    py::enum_<IsolationLevel>(m, "IsolationLevel", "@DocString(IsolationLevel)")
    .export_values()
    .value("ReadCommitted", IsolationLevel::ReadCommitted)
    .value("RepeatableRead", IsolationLevel::RepeatableRead)
    .value("Serializable", IsolationLevel::Serializable);

    py::class_<Witness>(m, "Witness", "@DocString(Witness)")
    .def(py::init<const std::string &>())
    .def("is_valid", &Witness::is_valid, "@DocString(Witness_is_valid)")
    .def("digest", &Witness::digest, "@DocString(Witness_digest)")
    .def("armor", &Witness::armor, "@DocString(Witness_armor)")
    .def("pretty_print_content", &Witness::pretty_print_content, "@DocString(Witness_pretty_print_content)");

    py::class_<Transaction, std::shared_ptr<Transaction>>(m, "Transaction", "@DocString(Transaction)")
    .def("commit", &Transaction::commit, "@DocString(Transaction_commit)")
    .def("get_collection", &Transaction::get_collection, "@DocString(Transaction_get_collection)");

    py::class_<Client, std::shared_ptr<Client>>(m, "Client", "@DocString(Client)")
    .def("get_statistics", &Client::get_statistics, "@DocString(Client_get_statistics)")
    .def("peer", &Client::peer, "@DocString(Client_peer)")
    .def("close", &Client::close, "@DocString(Client_close)")
//    .def("name", &Client::name, "@DocString(Client_name)") FIXME can't pass string reference
    .def("list_peers", &Client::list_peers, "@DocString(Client_list_peers)")
    .def("execute", &Client::execute, "@DocString(Client_execute)")
    .def("init_transaction", &Client::init_transaction, py::arg("isolation_level"), "@DocString(Client_init_transaction)")
    .def("get_server_cert_base64", &Client::get_server_cert_base64, "@DocString(Client_get_server_cert_base64)")
    .def("dump_everything", &Client::dump_everything, "@DocString(Client_dump_everything)")
    .def("load_everything", &Client::load_everything, "@DocString(Client_load_everything)")
    .def("peer", &Client::peer, "@DocString(Client_peer)")
    .def("list_peers", &Client::list_peers, "@DocString(Client_list_peers)")
    .def("get_collection", &Client::get_collection, "@DocString(Client_get_collection)");

    py::class_<Collection, std::shared_ptr<Collection>>(m, "Collection", "@DocString(Collection)")
    .def("diff", &Collection::diff, "@DocString(Collection_diff)")
    .def("count", &Collection::count, py::arg("predicates"), "@DocString(Collection_count)")
    .def("find", &Collection::find, py::arg("predicates"), py::arg("projection"), py::arg("limit"), "@DocString(Collection_find)")
    .def("find_one", &Collection::find_one, py::arg("predicates"), py::arg("projection"), "@DocString(Collection_find_one)")
    .def("add", &Collection::add, "@DocString(Collection_add)")
    .def("remove", &Collection::remove, "@DocString(Collection_remove)")
    .def("create_index", &Collection::create_index, "@DocString(Collection_create_index)")
    .def("drop_index", &Collection::drop_index, "@DocString(Collection_drop_index)")
    .def("put_from_file", &Collection::put_from_file, "@DocString(Collection_put_from_file)")
    .def("put_code_from_file", &Collection::put_code_from_file, "@DocString(Collection_put_code_from_file)")
    .def("clear", &Collection::clear, "@DocString(Collection_clear)")
    .def("call", &Collection::call, "@DocString(Collection_call)")
    .def("diff", &Collection::diff, "@DocString(Collection_diff)")
    .def("count", &Collection::count, py::arg("predicates"), "@DocString(Collection_count)")
    .def("remove", &Collection::remove, "@DocString(Collection_remove)")
    .def("put_code", &Collection::put_code, "@DocString(Collection_put_code)")
    .def("put",&Collection::put, "@DocString(Collection_put)")
    .def("get", &Collection::get, py::arg("key"), "@DocString(Collection_get)")
    .def("get_history", &Collection::get_history, "@DocString(Collection_get_history)");
}
