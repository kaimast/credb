/**
 * This file generates the python bindings for the client API
 */

#include "python_api_helper.h"

BOOST_PYTHON_FUNCTION_OVERLOADS(create_client_overloads, credb::create_client, 3, 4)
BOOST_PYTHON_FUNCTION_OVERLOADS(init_transaction_overloads, init_transaction_python, 1, 2)
BOOST_PYTHON_FUNCTION_OVERLOADS(find_one_overloads, find_one_python, 1, 3)
BOOST_PYTHON_FUNCTION_OVERLOADS(find_overloads, find_python, 1, 4)
BOOST_PYTHON_FUNCTION_OVERLOADS(count_overloads, count_python, 1, 2)

BOOST_PYTHON_MODULE(credb)
{
    py::docstring_options doc_options;
    doc_options.disable_signatures();

    py::to_python_converter<std::vector<json::Document>, VecDocToDoc>();
    py::to_python_converter<std::vector<std::tuple<std::string, json::Document>>, VecDocToDoc>();
    py::to_python_converter<json::Document, DocToDoc>();
    py::to_python_converter<std::tuple<std::string, json::Document>, VecDocToDoc>();

    py::to_python_converter<credb::event_id_t, EventIdConverter>();
    py::to_python_converter<credb::TransactionResult, TransactionResultConverter>();

    py::def("create_client", credb::create_client,
            create_client_overloads(py::args("client_name", "server_name", "host", "port"), "@DocString(create_client)"));

    py::enum_<IsolationLevel>("IsolationLevel", "@DocString(IsolationLevel)")
    .export_values()
    .value("ReadCommitted", IsolationLevel::ReadCommitted)
    .value("RepeatableRead", IsolationLevel::RepeatableRead)
    .value("Serializable", IsolationLevel::Serializable);

    py::class_<Witness>("Witness", "@DocString(Witness)", py::init<const std::string &>())
    .def("is_valid", &Witness::is_valid, "@DocString(Witness_is_valid)")
    .def("digest", &Witness::digest, "@DocString(Witness_digest)")
    .def("armor", &Witness::armor, "@DocString(Witness_armor)")
    .def("pretty_print_content", &Witness::pretty_print_content, "@DocString(Witness_pretty_print_content)");
    
    py::class_<Transaction, std::shared_ptr<Transaction>, boost::noncopyable>("Transaction", "@DocString(Transaction)", py::no_init)
    .def("commit", &Transaction_commit_python, "@DocString(Transaction_commit)")
    .def("get_collection", &Transaction::get_collection, "@DocString(Transaction_get_collection)");

    py::class_<Client, std::shared_ptr<Client>, boost::noncopyable>("Client", "@DocString(Client)", py::no_init)
    .def("peer", &Client::peer, "@DocString(Client_peer)")
//    .def("name", &Client::name, "@DocString(Client_name)") FIXME can't pass string reference
    .def("list_peers", &Client::list_peers, "@DocString(Client_list_peers)")
    .def("execute", &execute_python, "@DocString(Client_execute)")
    .def("init_transaction", &init_transaction_python, init_transaction_overloads(py::args("isolation_level"), "@DocString(Client_init_transaction)"))
    .def("get_server_cert_base64", &Client::get_server_cert_base64, "@DocString(Client_get_server_cert_base64)")
    .def("dump_everything", &Client::dump_everything, "@DocString(Client_dump_everything)")
    .def("load_everything", &Client::load_everything, "@DocString(Client_load_everything)")
    .def("peer", &Client::peer, "@DocString(Client_peer)")
    .def("list_peers", &Client::list_peers, "@DocString(Client_list_peers)")
    .def("get_collection", &Client::get_collection, "@DocString(Client_get_collection)");

    py::class_<Collection, std::shared_ptr<Collection>, boost::noncopyable>("Collection", "@DocString(Collection)", py::no_init)
    .def("diff", &Collection::diff, "@DocString(Collection_diff)")
    .def("count", &count_python, count_overloads(py::args("predicates"), "@DocString(Collection_count)"))
    .def("find", &find_python, find_overloads(py::args("predicates", "projection", "limit"), "@DocString(Collection_find)"))
    .def("find_one", &find_one_python, find_one_overloads(py::args("predicates", "projection"), "@DocString(Collection_find_one)"))
    .def("add", &add_python, "@DocString(Collection_add)")
    .def("remove", &Collection::remove, "@DocString(Collection_remove)")
    .def("create_index", &create_index_python, "@DocString(Collection_create_index)")
    .def("drop_index", &Collection::drop_index, "@DocString(Collection_drop_index)")
    .def("put_from_file", &Collection::put_from_file, "@DocString(Collection_put_from_file)")
    .def("put_code_from_file", &Collection::put_code_from_file, "@DocString(Collection_put_code_from_file)")
    .def("clear", &Collection::clear, "@DocString(Collection_clear)")
    .def("call", &call_python, "@DocString(Collection_call)")
    .def("diff", &Collection::diff, "@DocString(Collection_diff)")
    .def("count", &count_python, count_overloads(py::args("prefix", "predicates"), "@DocString(Collection_count)"))
    .def("remove", &Collection::remove, "@DocString(Collection_remove)")
    .def("put_code", &Collection::put_code, "@DocString(Collection_put_code)")
    .def("put", &put_python, "@DocString(Collection_put)")
    .def("get", &get_python, "@DocString(Collection_get)")
    .def("get_history", &Collection::get_history, "@DocString(Collection_get_history)");

}
